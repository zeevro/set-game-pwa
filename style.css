:root {
  --red: #ee0000;
  --purple: darkorchid;
  --green: green;
  --board-color: #071f45;
  /* --shadow-color: #a0a2db; */
  --shadow-color: rgba(255, 255, 255, 0.5);
  --selected-displacement-x: 4px;
  --selected-displacement-y: 7px;
  --hint-color: yellow;
}

html, body {
  height: 100vh;
  width: 100vw;
  padding: 0;
  margin: 0;
  border: 0;
  user-select: none;
}

.hidden {
  display: none;
}

.container {
  height: 100%;
  background-color: var(--board-color);
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.bad-set {
  animation: bad-set 0.8s;
}

.top-bar {
  height: 50px;
  display: flex;
}

.progress-container {
  height: 100%;
  width: 100%;
}

#deckProgress {
  height: 100%;
  width: 100%;
}

#deckProgressLabel {
  text-align: center;
  font-size: 120%;
  position: absolute;
  top: calc(25px - 0.6em);
  left: 0;
  right: 50px;
  color: black;
  text-shadow: -1px -1px 1px lightblue, 1px -1px 1px lightblue, -1px 1px 1px lightblue, 1px 1px 1px lightblue;
}

#settingsBtn {
  padding: 5px;
}

#settingsBtn img {
  height: 100%;
}

.game-buttons-container {
  display: flex;
}

.game-button {
  width: 100%;
  height: 50px;
  margin: 15px;
  border-radius: 5px;
  border: 1px solid black;
}

.game-board {
  height: 100%;
  width: 100%;
  max-width: 60vh;
  align-self: center;
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  align-content: space-evenly;
  justify-content: space-evenly;
  padding: 0 6px;
}

.card {
  background: whitesmoke;
  margin: 5px;
  width: calc(33.33% - 10px);
  padding-top: 20%;
  cursor: pointer;
  border-radius: 10px;
  position: relative;
}

.card-content {
  height: 100%;
  width: 100%;
  padding: 15px;
  display: flex;
  justify-content: center;
  position: absolute;
  top: 0;
  box-sizing: border-box;
}

.card-content svg {
  height: 100%;
  margin: 0 1.5%;
}

.card.selected {
  box-shadow: var(--selected-displacement-x) var(--selected-displacement-y) var(--shadow-color);
  left: calc(var(--selected-displacement-x) * -1);
  top: calc(var(--selected-displacement-y) * -1);
}

.card.hinted {
  box-shadow: -5px -5px 5px var(--hint-color), 5px -5px 5px var(--hint-color), -5px 5px 5px var(--hint-color), 5px 5px 5px var(--hint-color);
  /* transition: box-shadow 0.4s ease; */
}

.card.selected.hinted {
  box-shadow: var(--selected-displacement-x) var(--selected-displacement-y) 5px 2px var(--hint-color);
  /* transition: none; */
}

.card path {
  stroke-width: 6;
}

.pattern path {
  stroke-width: 8;
}

.card.new {
  animation: card-flip 0.4s ease;
}

.red path {
  stroke: var(--red);
}

.purple path {
  stroke: var(--purple);
}

.green path {
  stroke: var(--green);
}

.toast {
  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
  font-size: x-large;
  position: absolute;
  /* bottom: calc(50px + attr(data-position) * (20px + 1em)); */
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  width: fit-content;
  text-align: center;
  padding: 10px;
  border-radius: 10px;
  background-color: rgba(0, 0, 0, 0.8);
  color: white;
  animation: card-flip 0.4s ease;
}

.toast.dead {
  animation: card-flip-out 0.4s ease;
}

.modal {
  height: 0;
  width: 0;
  overflow: hidden;
  font-size: xx-large;
}

.modal.active {
  flex-direction: column;
  width: 100%;
  height: 100%;
  position: fixed;
  background-color: rgba(0, 0, 0, 0.5);
  left: 0;
  top: 0;
}

.modal > .modal-content {
  position: relative;
  left: 0;
  right: 0;
  top: 50%;
  background: white;
  display: flex;
  flex-direction: column;
  width: fit-content;
  max-width: 95%;
  max-height: 95%;
  margin: auto;
  padding: 10px;
  vertical-align: middle;
  transform: translateY(-50%);
}

.modal-title {
  text-decoration: underline;
}

.modal .buttons * {
  float: right;
  margin-left: 0.2em;
  margin-top: 0.2em;
  font-size: x-large;
}

@keyframes bad-set {
  0% {
    background-color: darkred;
  }
  1000% {
    background-color: inherit;
  }
}

@keyframes card-flip {
  0% {
    transform: rotateX(90deg);
  }
  100% {
    transform: rotateX(0deg);
  }
}

@keyframes card-flip-out {
  0% {
    transform: rotateX(0deg);
  }
  100% {
    transform: rotateX(90deg);
  }
}
